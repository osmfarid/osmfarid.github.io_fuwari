---
import '@fontsource/roboto/400.css'
import '@fontsource/roboto/500.css'
import '@fontsource/roboto/700.css'
import Head from '@components/base/Head.astro'
import Banner from '@components/base/Banner.astro'
import Footer from '@components/base/Footer.astro'
import Navbar from '@components/base/header/Navbar.astro'
import BackToTop from '@components/control/BackToTop.astro'
import SideBar from '@components/widget/SideBar.astro'

import { pathsEqual } from '@utils/url-utils'
import { siteConfig } from '@/config'

interface Props {
  title?: string
  banner?: string
  description?: string
}

let { title, banner, description } = Astro.props

const isHomePage = pathsEqual(Astro.url.pathname, '/')

if (!banner || typeof banner !== 'string' || banner.trim() === '') {
  banner = siteConfig.banner.src
}

// TODO don't use post cover as banner for now
banner = siteConfig.banner.src

const enableBanner = siteConfig.banner.enable

const siteLang = siteConfig.lang.replace('_', '-')
---
<!DOCTYPE html>
<html 
	data-overlayscrollbars-initialize 
	lang={siteLang} 
	data-is-home={isHomePage}  
	class="html-styles transition">
	<Head title={title} description={description}><slot slot="head" name="head"></slot></Head>
	<body data-overlayscrollbars-initialize class:list={[{"is-home": isHomePage, "enable-banner": enableBanner}, "body"]}>
		{enableBanner && <Banner banner={banner}/>}
		<Navbar/>
		<main id="content-wrapper" class="grid grid-cols-1 md:!grid-cols-[17.5rem_auto] gap-4">
			<SideBar/>
			<article id="swup" class="transition-fade">
				<slot/>
			</article>
		</main>
		<Footer/>
		<!-- <BackToTop/> -->
	</body>
</html>

<script>
import 'overlayscrollbars/overlayscrollbars.css';
import {
	OverlayScrollbars
} from 'overlayscrollbars';
import {getHue, getStoredTheme, setHue, setTheme} from "../utils/setting-utils";

function setClickOutsideToClose(panel: string, ignores: string[]) {
	document.addEventListener("click", event => {
		let panelDom = document.getElementById(panel);
		let tDom = event.target;
		for (let ig of ignores) {
			let ie = document.getElementById(ig)
			if (ie == tDom || (ie?.contains(tDom as Node))) {
				return;
			}
		}
		panelDom?.classList.add("float-panel-closed");
	});
}
setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"])
setClickOutsideToClose("nav-menu-panel", ["nav-menu-panel", "nav-menu-switch"])
setClickOutsideToClose("search-panel", ["search-panel", "search-bar", "search-switch"])


function loadTheme() {
	const theme = getStoredTheme()
	setTheme(theme)
}

function loadHue() {
	setHue(getHue())
}

function setBannerHeight() {
	const banner = document.getElementById('banner-wrapper');
	if (document.documentElement.hasAttribute('data-is-home')) {
		banner?.classList.remove('banner-else');
		banner?.classList.add('banner-home');
	} else {
		banner?.classList.remove('banner-home');
		banner?.classList.add('banner-else');
	}
}

function initCustomScrollbar() {
	OverlayScrollbars(
		// docs say that a initialization to the body element would affect native functionality like window.scrollTo
		// but just leave it here for now
		{
			target: document.querySelector('body')!,
			cancel: {
				nativeScrollbarsOverlaid: true,    // don't initialize the overlay scrollbar if there is a native one
			}
		}, {
		scrollbars: {
			theme: 'scrollbar-base scrollbar-auto py-1',
			autoHide: 'move',
			autoHideDelay: 500,
			autoHideSuspend: false,
		},
	});
	document.querySelectorAll('pre').forEach((ele) => {
		OverlayScrollbars(ele, {
			scrollbars: {
				theme: 'scrollbar-base scrollbar-dark px-2',
				autoHide: 'leave',
				autoHideDelay: 500,
				autoHideSuspend: false
			}
		});
	});
}

function init() {
	setBannerHeight();
	loadTheme();
	loadHue();
	initCustomScrollbar();
}

/* Load settings when entering the site */
init();

/* Load settings before swapping */
/* astro:after-swap event happened before swap animation */
document.addEventListener('astro:after-swap', init);

const setup = () => {
	// TODO: temp solution to change the height of the banner
/*
	window.swup.hooks.on('animation:out:start', () => {
		const path = window.location.pathname
		const body = document.querySelector('body')
		if (path[path.length - 1] === '/' && !body.classList.contains('is-home')) {
			body.classList.add('is-home')
		} else if (path[path.length - 1] !== '/' && body.classList.contains('is-home')) {
			body.classList.remove('is-home')
		}
	})
*/
if(window.swup && window.swup.hooks){
// Remove the delay for the first time page load
	window.swup.hooks.on('link:click', () => {
		document.documentElement.style.setProperty('--content-delay', '0ms')
	})
}
	
}
if (window.swup && window.swup.hooks) {
	setup()
} else {
	document.addEventListener('swup:enable', setup)
}

</script>